# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
library(jsonlite)
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData$created_at[jsonData$name=="datasharing"]
?sqldf
library(sqldf)
?"sqldf"
rm(list=ls())
library(swirl)
swirl()
colors()
sample(colors(), 10)
?sample
pal<- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
exit()
stop()
play()
end()
nxt()
bye()
library(swirl)
swirl()
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(myfd)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?sselect
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, asce(country), desc(r_version), aesc(ip_id))
arrange(cran2, country, desc(r_version),ip_id)
cran3<- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb= size / 2^20)
mutate(cran3, size_mb= size / 2^20, size_gb = size_mb/ 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<- gather(students2, sex_class, count, -grade)
res
?separate
separate(data= res,col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed<-mutate(passed, status=c("passed"))
passed<-mutate(passed, status="passed")
failed<-mutate(failed, status="failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
submit
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
minute(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1-9-2012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours = 9, minutes = 46)
this_moment
?now
nyc<-now(tzone="America/New_York")
nyc
depart<-nyc + days(2)
depart
depart<-update(hours=17, minutes =34)
depart<-update(depart, hours=17, minutes =34)
depart
arrive<- depart + hours(15) + minutes(50)
?with_tz
arrive<-with_tz(arrive, tz="Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008")
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long<- new_interval(last_time, arrive)
as.period(how_long)
stopwatch
stopwatch()
install.packages("xtable")
setwd("C:/Users/py/Desktop/Data Science/Reproducible Research/Course Project 1/repdata-data-activity")
setwd("C:/Users/py/Desktop/Data Science/Reproducible Research/Course Project 1/RepData_PeerAssessment1")
activity<-read.csv("./activity/activity.csv", header=TRUE)
str(activity)
library(lubridate)
activity$date<-ymd(activity$date)
str(activity)
library(ggplot2)
head(activity)
tail(activity)
summary(activity)
library(dplyr)
tbl_df(activity)
eachday<-summarise(activity, date)
perday<-group_by(activity, date)
perday
histo<- qplot(date, steps)
histo
histo<- qplot(date, steps, data = perday)
histo
histo2<-hist(perday$steps)
histo2<-hist(perday$date, perday$steps)
totalperday<-mutate(perday, totalsteps=sum(steps))
totalperday
totalperday<-count(perday, date)
totalperday
totalperday<-summarise(perday, total = sum(steps),date)
totalperday<-summarise(perday, date, total = sum(steps))
totalperday<-summarise(perday, total = sum(steps))
totalperday
totalperday<-summarise(perday, totalsteps = sum(steps))
totalperday
qplot(totalperday)
qplot(totalsteps, date, data=totalperday)
qplot(totalsteps,data=totalperday)
qplot(date, totalsteps, data=totalperday)
dev.off()
qplot(date, totalsteps, data=totalperday)
qplot(date, totalsteps, data=totalperday, binwidth=2)
ggplot(totalperday, aes(date, totalsteps) + geom_histogram)
plot<- ggplot(totalperday, aes(date, totalsteps) + geom_histogram)
plot<- ggplot(totalperday, aes(totalsteps) + geom_histogram)
plot<- ggplot(totalperday, aes(totalsteps) + geom_histogram())
plot<- ggplot(totalperday, aes(date, totalsteps)) + geom_histogram())
plot<- ggplot(totalperday, aes(date, totalsteps)) + geom_histogram()
plot
plot<- ggplot(totalperday, date, totalsteps) + geom_histogram()
plot<- ggplot(totalperday, aes(date), totalsteps) + geom_histogram()
plot
plot<- ggplot(totalperday, aes(date), totalsteps, binwidth=2) + geom_histogram()
plot
plot<- ggplot(totalperday, aes(date), totalsteps, binwidth="2") + geom_histogram()
plot
plot<- ggplot(totalperday, aes(date), totalsteps) + geom_histogram(binwidth=2)
plot
p<-hist(totalperday$totalsteps)
mean(totalsteps)
mean(totalperday$totalsteps)
mean(totalperday$totalsteps, na.rm=TRUE)
median(totalperday$totalsteps)
median(totalperday$totalsteps, na.rm=TRUE)
